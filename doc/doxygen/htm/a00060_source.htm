<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>2GrayEngine: Исходный файл functionAttributesMethods.h</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen_.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo.bmp"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">2GrayEngine
   </div>
   <div id="projectbrief">Network engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Создано системой Doxygen 1.8.5 -->
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_32937a55a6fb687a16826cf9f361e0b9.htm">2GrayEngine-master</a></li><li class="navelem"><a class="el" href="dir_abb26aa1f738470fd3c1e4a1410fa318.htm">code</a></li><li class="navelem"><a class="el" href="dir_7b03119028471f63899a2cbbb9408639.htm">logic</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">functionAttributesMethods.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor"># ifndef H_LOGIC_FUNCTIONATTRIBUTESMETHODS</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor"># define H_LOGIC_FUNCTIONATTRIBUTESMETHODS</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div>
<div class="line"><a name="l00014"></a><span class="lineno"><a class="line" href="a00012.htm#a5d5ed44f2168a9c5ac1a8b8d03b7ed63">   14</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="a00012.htm#a5d5ed44f2168a9c5ac1a8b8d03b7ed63">FunctionAttributes :: verify</a> ()<span class="keyword"> const</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    <span class="keywordflow">if</span> ( !<span class="keyword">this</span> )</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    {</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;        OUTPUT_INTERNAL (<span class="stringliteral">&quot;this pointer - is nullptr&quot;</span>);</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    }</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="keywordflow">if</span> ( !version_ )</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    {</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        OUTPUT_INTERNAL (<span class="stringliteral">&quot;null version&quot;</span>);</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    }</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keywordflow">if</span> ( !code_ )</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    {</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        OUTPUT_INTERNAL (<span class="stringliteral">&quot;null code&quot;</span>);</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    }</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;}</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="a00012.htm#aa5aa7ab67999457dbd88eec7ac0ce542">   42</a></span>&#160;FunctionAttributes :: FunctionAttributes (<span class="keywordtype">int</span> code, <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    :</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    version_ (ENGINE_VERSION),</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    code_    (code),</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    name_    (nullptr)</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    {</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size = strlen (name);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        name_ = <span class="keyword">new</span> <span class="keywordtype">char</span>[size + 1];</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        memcpy (name_, name, size);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        name_[size] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    }</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">catch</span> (::std::bad_alloc)</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        OUTPUT_INTERNAL (<span class="stringliteral">&quot;cant alloc&quot;</span>);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    }</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div>
<div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="a00012.htm#adaa7a89cc6a6bfcdaa50b1522cb3bf8e">   67</a></span>&#160;FunctionAttributes :: FunctionAttributes (<a class="code" href="a00012.htm">FunctionAttributes</a>&amp; attr)</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    :</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    version_ (ENGINE_VERSION),</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    code_    (attr.code ()),</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    name_    (nullptr)</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;{</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size = strlen (attr.<a class="code" href="a00012.htm#a25844783e4bef74ca9a17519c239a27e">name</a> ());</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        name_ = <span class="keyword">new</span> <span class="keywordtype">char</span>[size + 1];</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        memcpy (name_, attr.<a class="code" href="a00012.htm#a25844783e4bef74ca9a17519c239a27e">name</a>(), size);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        name_[size] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">catch</span> (::std::bad_alloc)</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        OUTPUT_INTERNAL (<span class="stringliteral">&quot;cant alloc&quot;</span>);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;}</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div>
<div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="a00012.htm#a9fbb542ce0dae274d40866ba432b411a">   93</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="a00012.htm#a9fbb542ce0dae274d40866ba432b411a">FunctionAttributes :: code</a> ()<span class="keyword"> const</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">if</span> ( !<a class="code" href="a00012.htm#a5d5ed44f2168a9c5ac1a8b8d03b7ed63">verify</a> () )</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        OUTPUT_INTERNAL (<span class="stringliteral">&quot;bad object&quot;</span>);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    }</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">return</span> code_;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;}</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div>
<div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="a00012.htm#aa5f30d51d4a86222cd00a2e05826a7db">  110</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="a00012.htm#aa5f30d51d4a86222cd00a2e05826a7db">FunctionAttributes :: version</a> ()<span class="keyword"> const</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">if</span> ( !<a class="code" href="a00012.htm#a5d5ed44f2168a9c5ac1a8b8d03b7ed63">verify</a> () )</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        OUTPUT_INTERNAL (<span class="stringliteral">&quot;bad object&quot;</span>);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">return</span> version_;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div>
<div class="line"><a name="l00128"></a><span class="lineno"><a class="line" href="a00012.htm#a25844783e4bef74ca9a17519c239a27e">  128</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="a00012.htm#a25844783e4bef74ca9a17519c239a27e">FunctionAttributes :: name</a> ()<span class="keyword"> const</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">if</span> ( !<a class="code" href="a00012.htm#a5d5ed44f2168a9c5ac1a8b8d03b7ed63">verify</a> () )</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        OUTPUT_INTERNAL (<span class="stringliteral">&quot;bad object&quot;</span>);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">return</span> name_;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div>
<div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="a00012.htm#abeac9de6a4c590772dd0def8e272a368">  147</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="a00012.htm#abeac9de6a4c590772dd0def8e272a368">FunctionAttributes :: argnum</a> ()<span class="keyword"> const</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">if</span> ( !<a class="code" href="a00012.htm#a5d5ed44f2168a9c5ac1a8b8d03b7ed63">verify</a> () )</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    {</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        OUTPUT_INTERNAL (<span class="stringliteral">&quot;bad object&quot;</span>);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordflow">return</span> args_.size ();</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;}</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="a00012.htm#a709e01e713986c3c668e9dfdec11d5ba">  168</a></span>&#160;<span class="keywordtype">int</span>  <a class="code" href="a00012.htm#a709e01e713986c3c668e9dfdec11d5ba">FunctionAttributes :: arg</a> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index)<span class="keyword"> const</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">if</span> ( !<a class="code" href="a00012.htm#a5d5ed44f2168a9c5ac1a8b8d03b7ed63">verify</a> () )</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        OUTPUT_INTERNAL (<span class="stringliteral">&quot;bad object&quot;</span>);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    }</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    {</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keywordflow">if</span> ( args_.size () &lt;= index )</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">return</span> args_.at (index);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordflow">catch</span> (::std::out_of_range)</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        OUTPUT_INTERNAL (<span class="stringliteral">&quot;bad index out of range index:%d size:%d&quot;</span>, index,</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                                                             args_.size ());</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    }</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;}</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div>
<div class="line"><a name="l00200"></a><span class="lineno"><a class="line" href="a00012.htm#a554f6bc1e11115c565703f5f35853881">  200</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="a00012.htm#a554f6bc1e11115c565703f5f35853881">FunctionAttributes :: pushArg</a> (<span class="keywordtype">int</span> code)</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;{</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordflow">if</span> ( !<a class="code" href="a00012.htm#a5d5ed44f2168a9c5ac1a8b8d03b7ed63">verify</a> () )</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    {</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        OUTPUT_INTERNAL (<span class="stringliteral">&quot;bad object&quot;</span>);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    {</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        args_.push_back (code);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    }</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordflow">catch</span> (::std::bad_alloc)</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    {</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        OUTPUT_INTERNAL (<span class="stringliteral">&quot;cant push argument&quot;</span>);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    }</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;}</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div>
<div class="line"><a name="l00224"></a><span class="lineno"><a class="line" href="a00012.htm#a1829cf1059374c6dacb2da166f90344f">  224</a></span>&#160;<a class="code" href="a00012.htm#a1829cf1059374c6dacb2da166f90344f">FunctionAttributes :: ~FunctionAttributes</a> ()</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;{</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    code_ = 0;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    version_ = 0;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">if</span> ( name_ )</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="keyword">delete</span>[] name_;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    name_ = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;}</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="preprocessor"># endif </span><span class="comment">/* H_LOGIC_FUNCTIONATTRIBUTESMETHODS */</span><span class="preprocessor"></span></div>
<div class="ttc" id="a00012_htm_a709e01e713986c3c668e9dfdec11d5ba"><div class="ttname"><a href="a00012.htm#a709e01e713986c3c668e9dfdec11d5ba">FunctionAttributes::arg</a></div><div class="ttdeci">int arg(unsigned int index) const </div><div class="ttdef"><b>Definition:</b> <a href="a00060_source.htm#l00168">functionAttributesMethods.h:168</a></div></div>
<div class="ttc" id="a00012_htm_a5d5ed44f2168a9c5ac1a8b8d03b7ed63"><div class="ttname"><a href="a00012.htm#a5d5ed44f2168a9c5ac1a8b8d03b7ed63">FunctionAttributes::verify</a></div><div class="ttdeci">bool verify() const </div><div class="ttdef"><b>Definition:</b> <a href="a00060_source.htm#l00014">functionAttributesMethods.h:14</a></div></div>
<div class="ttc" id="a00012_htm"><div class="ttname"><a href="a00012.htm">FunctionAttributes</a></div><div class="ttdef"><b>Definition:</b> <a href="a00059_source.htm#l00012">functionAttributes.h:12</a></div></div>
<div class="ttc" id="a00012_htm_a554f6bc1e11115c565703f5f35853881"><div class="ttname"><a href="a00012.htm#a554f6bc1e11115c565703f5f35853881">FunctionAttributes::pushArg</a></div><div class="ttdeci">bool pushArg(int code)</div><div class="ttdef"><b>Definition:</b> <a href="a00060_source.htm#l00200">functionAttributesMethods.h:200</a></div></div>
<div class="ttc" id="a00012_htm_abeac9de6a4c590772dd0def8e272a368"><div class="ttname"><a href="a00012.htm#abeac9de6a4c590772dd0def8e272a368">FunctionAttributes::argnum</a></div><div class="ttdeci">int argnum() const </div><div class="ttdef"><b>Definition:</b> <a href="a00060_source.htm#l00147">functionAttributesMethods.h:147</a></div></div>
<div class="ttc" id="a00012_htm_a25844783e4bef74ca9a17519c239a27e"><div class="ttname"><a href="a00012.htm#a25844783e4bef74ca9a17519c239a27e">FunctionAttributes::name</a></div><div class="ttdeci">const char * name() const </div><div class="ttdef"><b>Definition:</b> <a href="a00060_source.htm#l00128">functionAttributesMethods.h:128</a></div></div>
<div class="ttc" id="a00012_htm_aa5f30d51d4a86222cd00a2e05826a7db"><div class="ttname"><a href="a00012.htm#aa5f30d51d4a86222cd00a2e05826a7db">FunctionAttributes::version</a></div><div class="ttdeci">int version() const </div><div class="ttdef"><b>Definition:</b> <a href="a00060_source.htm#l00110">functionAttributesMethods.h:110</a></div></div>
<div class="ttc" id="a00012_htm_a9fbb542ce0dae274d40866ba432b411a"><div class="ttname"><a href="a00012.htm#a9fbb542ce0dae274d40866ba432b411a">FunctionAttributes::code</a></div><div class="ttdeci">int code() const </div><div class="ttdef"><b>Definition:</b> <a href="a00060_source.htm#l00093">functionAttributesMethods.h:93</a></div></div>
<div class="ttc" id="a00012_htm_a1829cf1059374c6dacb2da166f90344f"><div class="ttname"><a href="a00012.htm#a1829cf1059374c6dacb2da166f90344f">FunctionAttributes::~FunctionAttributes</a></div><div class="ttdeci">~FunctionAttributes()</div><div class="ttdef"><b>Definition:</b> <a href="a00060_source.htm#l00224">functionAttributesMethods.h:224</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Документация по 2GrayEngine. Последние изменения: Пн 19 Май 2014 03:06:19. Создано системой &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
