<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>2GrayEngine: Исходный файл types.h</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen_.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo.bmp"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">2GrayEngine
   </div>
   <div id="projectbrief">Network engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Создано системой Doxygen 1.8.5 -->
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_32937a55a6fb687a16826cf9f361e0b9.htm">2GrayEngine-master</a></li><li class="navelem"><a class="el" href="dir_abb26aa1f738470fd3c1e4a1410fa318.htm">code</a></li><li class="navelem"><a class="el" href="dir_4415345cc848248c7d1854a28e161023.htm">userLib</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">types.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor"># ifndef H_USERLIB_TEXTMETHODS</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor"># define H_USERLIB_TEXTMETHODS</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="keyword">class </span><a class="code" href="a00029.htm">Text</a> : <span class="keyword">public</span> <a class="code" href="a00016.htm">Object</a></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;{</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;    <span class="keywordtype">char</span>* text_;</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="a00029.htm#a388f572c62279f839ee138a9afbdeeb5">print</a> ()</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    {</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;        <span class="keywordflow">if</span> ( !text_ )</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;            printf (<span class="stringliteral">&quot;\nBLANK_ECHO!&quot;</span>);</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;            printf (<span class="stringliteral">&quot;\nECHO:%s&quot;</span>, text_);</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    }</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#a65202a7c3049d325d0e8c88f0e849d32">readFromQuotes</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* text)</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    {</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        <span class="keywordtype">char</span>* end = strchr (text + 1, <span class="charliteral">&#39;&quot;&#39;</span>);</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        <span class="keywordflow">if</span> ( !end )</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size = end - text - 1;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <span class="keywordtype">char</span>* newText = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <span class="keywordflow">try</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        {</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            newText = <span class="keyword">new</span> <span class="keywordtype">char</span>[size + 1];</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;            memcpy (newText, text + 1, size);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            newText[size] = 0;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        }</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keywordflow">catch</span> (::std::bad_alloc)</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        {</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        }</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">if</span> ( this-&gt;text_ )</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            <span class="keyword">delete</span>[] this-&gt;text_;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        this-&gt;text_ = newText;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    }</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#adecc4441e05c4a2ceec5137a1443a4c1">set</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* smth)</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    {</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size = strlen (smth);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordtype">char</span>* newText = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">try</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            newText = <span class="keyword">new</span> <span class="keywordtype">char</span>[size + 1];</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            memcpy (newText, smth, size);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            newText[size] = 0;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        }</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keywordflow">catch</span> (::std::bad_alloc)</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        {</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        }</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">if</span> ( this-&gt;text_ )</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keyword">delete</span>[] this-&gt;text_;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        this-&gt;text_ = newText;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        printf (<span class="stringliteral">&quot;AAA&quot;</span>);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        printf (<span class="stringliteral">&quot;\nNEW:%s&quot;</span>, text_);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    }</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* <span class="keyword">get</span> ()</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        OUTPUT_DEBUG (<span class="stringliteral">&quot;Getting:%s&quot;</span>, text_);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">return</span> text_;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="a00029.htm#a8bbff8b26bfd195b340d303ffa9b121b">~Text</a> ()</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">if</span> ( this-&gt;text_ )</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keyword">delete</span>[] this-&gt;text_;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        this-&gt;text_ = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    }</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <a class="code" href="a00029.htm#a950a98ae75562dc9c6a458acbd330143">Text</a> ()</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        :</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <a class="code" href="a00016.htm">Object</a> (12),</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        text_ (nullptr)</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        OUTPUT_DEBUG (<span class="stringliteral">&quot;TEXT CREATED&quot;</span>);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    }</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;};</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<a class="code" href="a00016.htm">Object</a>* TEXTcreate ()</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;{</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="a00029.htm">Text</a>* result = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        result = <span class="keyword">new</span> <a class="code" href="a00029.htm">Text</a> ();</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordtype">char</span> name[256] = {};</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    sprintf (name,<span class="stringliteral">&quot;\&quot;%p\&quot;&quot;</span>, result);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        result-&gt;<a class="code" href="a00029.htm#a65202a7c3049d325d0e8c88f0e849d32">readFromQuotes</a> (name);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">catch</span> (::std::bad_alloc)</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">return</span> (<a class="code" href="a00016.htm">Object</a>*) result;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<a class="code" href="a00016.htm">Object</a>* TEXTcreateOn (<span class="keyword">const</span> <span class="keywordtype">char</span>* text)</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;{</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <a class="code" href="a00029.htm">Text</a>* result = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        result = <span class="keyword">new</span> <a class="code" href="a00029.htm">Text</a> ();</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        result-&gt;<a class="code" href="a00029.htm#a65202a7c3049d325d0e8c88f0e849d32">readFromQuotes</a> (text);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">catch</span> (::std::bad_alloc)</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    {</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">return</span> (<a class="code" href="a00016.htm">Object</a>*) result;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="keyword">class </span>Number</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;{</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordtype">int</span> number_;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">explicit</span> Number (<span class="keywordtype">int</span> num)</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        :</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    number_ (num)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    {}</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;};</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<a class="code" href="a00016.htm">Object</a>* NUMBERcreate ()</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    Number* result = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        result = <span class="keyword">new</span> Number (0);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    }</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">catch</span> (::std::bad_alloc)</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    {</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">return</span> (<a class="code" href="a00016.htm">Object</a>*) result;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;}</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<a class="code" href="a00016.htm">Object</a>* NUMBERcreateOn (<span class="keyword">const</span> <span class="keywordtype">char</span>* text)</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;{</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    Number* result = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    {</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        result = <span class="keyword">new</span> Number (atoi (text));</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">catch</span> (::std::bad_alloc)</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    {</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    }</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordflow">return</span> (<a class="code" href="a00016.htm">Object</a>*) result;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;}</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="keyword">class </span><a class="code" href="a00024.htm">Socket</a> : <span class="keyword">public</span> <a class="code" href="a00016.htm">Object</a></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;{</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <a class="code" href="a00021.htm">grNetwork::Server</a> server;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <a class="code" href="a00001.htm">grNetwork::Client</a> client;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <a class="code" href="a00024.htm#a82a9f33812cd255070e2516ee2bf8b77">Socket</a> ()</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        :</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <a class="code" href="a00016.htm">Object</a> (777)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        client.<a class="code" href="a00023.htm#a9a8ff6eba0efdf5d355b649f81e23faa">setPort</a> (97621);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        client.<a class="code" href="a00023.htm#abdafadb8f1d146ec549c9a5c1143b988">setIP</a> (<span class="stringliteral">&quot;127.0.0.1&quot;</span>);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        server.<a class="code" href="a00023.htm#a9a8ff6eba0efdf5d355b649f81e23faa">setPort</a> (97621);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        server.<a class="code" href="a00023.htm#abdafadb8f1d146ec549c9a5c1143b988">setIP</a> (<span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    OUTPUT_DEBUG (<span class="stringliteral">&quot;SOCKET CREATED&quot;</span>);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="a00024.htm#a637e37aa77a3652b1d25518a5af8570a">send</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* buff, <span class="keywordtype">int</span> size)</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordflow">if</span> ( !server.<a class="code" href="a00023.htm#aad5997aaaa2d622f0ca57f8b24a51a7b">start</a> () )</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        printf (<span class="stringliteral">&quot;START FAILURE&quot;</span>);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    OUTPUT_DEBUG (<span class="stringliteral">&quot;LISTENING&quot;</span>);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keywordflow">if</span> ( !server.<a class="code" href="a00021.htm#a9ea97bb8eac07838048fae3e0d32332a">listen</a> () )</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        printf (<span class="stringliteral">&quot;LISTEN FAILURE:%d %d&quot;</span>, server.<a class="code" href="a00023.htm#ac5da055f3ea72b200f23bf0d401d3fc1">getLastError</a> ().<a class="code" href="a00005.htm#a34d784c7de57ef82ac88e00044804479">lib</a> (),</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                                server.<a class="code" href="a00023.htm#ac5da055f3ea72b200f23bf0d401d3fc1">getLastError</a> ().<a class="code" href="a00005.htm#ac4c9bb62cd583b0a9a967f67cdedd0ae">local</a> ());</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    OUTPUT_DEBUG (<span class="stringliteral">&quot;SENDING&quot;</span>);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keywordflow">if</span> ( !server.<a class="code" href="a00023.htm#a637e37aa77a3652b1d25518a5af8570a">send</a> (buff, size) )</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        printf (<span class="stringliteral">&quot;SEND FAILURE&quot;</span>);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    OUTPUT_DEBUG (<span class="stringliteral">&quot;SENDED&quot;</span>);</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    }</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="a00024.htm#a5017ae7e9d1d5c8a8f75517ddea62b85">receive</a> (<a class="code" href="a00029.htm">Text</a>* txt)</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    {</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keywordtype">char</span> array[256] = {};</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;         <span class="keywordflow">if</span> ( !client.<a class="code" href="a00023.htm#aad5997aaaa2d622f0ca57f8b24a51a7b">start</a> () )</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        printf (<span class="stringliteral">&quot;START FAILURE&quot;</span>);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        OUTPUT_DEBUG (<span class="stringliteral">&quot;Listen started&quot;</span>);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordflow">if</span> ( !client.<a class="code" href="a00001.htm#aa0a57e883c6c9fc19e62a609d967be9c">connect</a> () )</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        printf (<span class="stringliteral">&quot;LISTEN FAILURE:%d %d&quot;</span>, client.<a class="code" href="a00023.htm#ac5da055f3ea72b200f23bf0d401d3fc1">getLastError</a> ().<a class="code" href="a00005.htm#a34d784c7de57ef82ac88e00044804479">lib</a> (),</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                                client.<a class="code" href="a00023.htm#ac5da055f3ea72b200f23bf0d401d3fc1">getLastError</a> ().<a class="code" href="a00005.htm#ac4c9bb62cd583b0a9a967f67cdedd0ae">local</a> ());</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        OUTPUT_DEBUG (<span class="stringliteral">&quot;Listen complete&quot;</span>);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keywordflow">if</span> ( !client.<a class="code" href="a00023.htm#a5017ae7e9d1d5c8a8f75517ddea62b85">receive</a> (array, 256) )</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        printf (<span class="stringliteral">&quot;SEND FAILURE&quot;</span>);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        txt-&gt;<a class="code" href="a00029.htm#adecc4441e05c4a2ceec5137a1443a4c1">set</a> (array);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    }</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;};</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<a class="code" href="a00016.htm">Object</a>* SOCKETcreate ()</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;{</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <a class="code" href="a00024.htm">Socket</a>* result = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    {</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        result = <span class="keyword">new</span> <a class="code" href="a00024.htm">Socket</a> ();</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    }</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordflow">catch</span> (::std::bad_alloc)</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    {</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    }</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">return</span> (<a class="code" href="a00016.htm">Object</a>*) result;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;}</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<a class="code" href="a00016.htm">Object</a>* SOCKETcreateOn (<span class="keyword">const</span> <span class="keywordtype">char</span>*)</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;{</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <a class="code" href="a00024.htm">Socket</a>* result = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    {</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        result = <span class="keyword">new</span> <a class="code" href="a00024.htm">Socket</a> ();</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    }</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordflow">catch</span> (::std::bad_alloc)</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    {</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    }</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">return</span> (<a class="code" href="a00016.htm">Object</a>*) result;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;}</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="preprocessor"># endif </span><span class="comment">/* H_USERLIB_TEXTMETHODS */</span><span class="preprocessor"></span></div>
<div class="ttc" id="a00023_htm_aad5997aaaa2d622f0ca57f8b24a51a7b"><div class="ttname"><a href="a00023.htm#aad5997aaaa2d622f0ca57f8b24a51a7b">grNetwork::Socket::start</a></div><div class="ttdeci">bool start()</div><div class="ttdef"><b>Definition:</b> <a href="a00043_source.htm#l00028">grNetwork/core.h:28</a></div></div>
<div class="ttc" id="a00024_htm"><div class="ttname"><a href="a00024.htm">Socket</a></div><div class="ttdef"><b>Definition:</b> <a href="a00085_source.htm#l00012">grNetwork/Socket/Socket.h:12</a></div></div>
<div class="ttc" id="a00016_htm"><div class="ttname"><a href="a00016.htm">Object</a></div><div class="ttdef"><b>Definition:</b> <a href="a00071_source.htm#l00012">Object.h:12</a></div></div>
<div class="ttc" id="a00029_htm"><div class="ttname"><a href="a00029.htm">Text</a></div><div class="ttdef"><b>Definition:</b> <a href="a00050_source.htm#l00006">echo.h:6</a></div></div>
<div class="ttc" id="a00029_htm_a388f572c62279f839ee138a9afbdeeb5"><div class="ttname"><a href="a00029.htm#a388f572c62279f839ee138a9afbdeeb5">Text::print</a></div><div class="ttdeci">void print()</div><div class="ttdef"><b>Definition:</b> <a href="a00050_source.htm#l00013">echo.h:13</a></div></div>
<div class="ttc" id="a00001_htm"><div class="ttname"><a href="a00001.htm">grNetwork::Client</a></div><div class="ttdef"><b>Definition:</b> <a href="a00043_source.htm#l00013">grNetwork/core.h:13</a></div></div>
<div class="ttc" id="a00001_htm_aa0a57e883c6c9fc19e62a609d967be9c"><div class="ttname"><a href="a00001.htm#aa0a57e883c6c9fc19e62a609d967be9c">grNetwork::Client::connect</a></div><div class="ttdeci">bool connect()</div><div class="ttdef"><b>Definition:</b> <a href="a00043_source.htm#l00014">grNetwork/core.h:14</a></div></div>
<div class="ttc" id="a00024_htm_a637e37aa77a3652b1d25518a5af8570a"><div class="ttname"><a href="a00024.htm#a637e37aa77a3652b1d25518a5af8570a">Socket::send</a></div><div class="ttdeci">bool send(const char *what, unsigned int size)</div><div class="ttdef"><b>Definition:</b> <a href="a00088_source.htm#l00102">grNetwork/Socket/SocketMethods.h:102</a></div></div>
<div class="ttc" id="a00023_htm_a5017ae7e9d1d5c8a8f75517ddea62b85"><div class="ttname"><a href="a00023.htm#a5017ae7e9d1d5c8a8f75517ddea62b85">grNetwork::Socket::receive</a></div><div class="ttdeci">bool receive(char *where, unsigned int size)</div><div class="ttdef"><b>Definition:</b> <a href="a00043_source.htm#l00131">grNetwork/core.h:131</a></div></div>
<div class="ttc" id="a00029_htm_adecc4441e05c4a2ceec5137a1443a4c1"><div class="ttname"><a href="a00029.htm#adecc4441e05c4a2ceec5137a1443a4c1">Text::set</a></div><div class="ttdeci">bool set(const char *smth)</div><div class="ttdef"><b>Definition:</b> <a href="a00050_source.htm#l00048">echo.h:48</a></div></div>
<div class="ttc" id="a00005_htm_ac4c9bb62cd583b0a9a967f67cdedd0ae"><div class="ttname"><a href="a00005.htm#ac4c9bb62cd583b0a9a967f67cdedd0ae">grNetwork::ErrorInfo::local</a></div><div class="ttdeci">unsigned int local() const </div><div class="ttdef"><b>Definition:</b> <a href="a00043_source.htm#l00060">grNetwork/core.h:60</a></div></div>
<div class="ttc" id="a00024_htm_a5017ae7e9d1d5c8a8f75517ddea62b85"><div class="ttname"><a href="a00024.htm#a5017ae7e9d1d5c8a8f75517ddea62b85">Socket::receive</a></div><div class="ttdeci">bool receive(char *where, unsigned int size)</div><div class="ttdef"><b>Definition:</b> <a href="a00088_source.htm#l00130">grNetwork/Socket/SocketMethods.h:130</a></div></div>
<div class="ttc" id="a00023_htm_abdafadb8f1d146ec549c9a5c1143b988"><div class="ttname"><a href="a00023.htm#abdafadb8f1d146ec549c9a5c1143b988">grNetwork::Socket::setIP</a></div><div class="ttdeci">bool setIP(const char *IP)</div><div class="ttdef"><b>Definition:</b> <a href="a00043_source.htm#l00064">grNetwork/core.h:64</a></div></div>
<div class="ttc" id="a00029_htm_a65202a7c3049d325d0e8c88f0e849d32"><div class="ttname"><a href="a00029.htm#a65202a7c3049d325d0e8c88f0e849d32">Text::readFromQuotes</a></div><div class="ttdeci">bool readFromQuotes(const char *text)</div><div class="ttdef"><b>Definition:</b> <a href="a00050_source.htm#l00024">echo.h:24</a></div></div>
<div class="ttc" id="a00023_htm_a637e37aa77a3652b1d25518a5af8570a"><div class="ttname"><a href="a00023.htm#a637e37aa77a3652b1d25518a5af8570a">grNetwork::Socket::send</a></div><div class="ttdeci">bool send(const char *what, unsigned int size)</div><div class="ttdef"><b>Definition:</b> <a href="a00043_source.htm#l00103">grNetwork/core.h:103</a></div></div>
<div class="ttc" id="a00021_htm_a9ea97bb8eac07838048fae3e0d32332a"><div class="ttname"><a href="a00021.htm#a9ea97bb8eac07838048fae3e0d32332a">grNetwork::Server::listen</a></div><div class="ttdeci">bool listen(Client *listenSocket=nullptr)</div><div class="ttdef"><b>Definition:</b> <a href="a00043_source.htm#l00032">grNetwork/core.h:32</a></div></div>
<div class="ttc" id="a00029_htm_a8bbff8b26bfd195b340d303ffa9b121b"><div class="ttname"><a href="a00029.htm#a8bbff8b26bfd195b340d303ffa9b121b">Text::~Text</a></div><div class="ttdeci">~Text()</div><div class="ttdef"><b>Definition:</b> <a href="a00050_source.htm#l00075">echo.h:75</a></div></div>
<div class="ttc" id="a00023_htm_ac5da055f3ea72b200f23bf0d401d3fc1"><div class="ttname"><a href="a00023.htm#ac5da055f3ea72b200f23bf0d401d3fc1">grNetwork::Socket::getLastError</a></div><div class="ttdeci">ErrorInfo getLastError() const </div><div class="ttdef"><b>Definition:</b> <a href="a00043_source.htm#l00155">grNetwork/core.h:155</a></div></div>
<div class="ttc" id="a00021_htm"><div class="ttname"><a href="a00021.htm">grNetwork::Server</a></div><div class="ttdef"><b>Definition:</b> <a href="a00043_source.htm#l00013">grNetwork/core.h:13</a></div></div>
<div class="ttc" id="a00024_htm_a82a9f33812cd255070e2516ee2bf8b77"><div class="ttname"><a href="a00024.htm#a82a9f33812cd255070e2516ee2bf8b77">Socket::Socket</a></div><div class="ttdeci">Socket()</div><div class="ttdef"><b>Definition:</b> <a href="a00088_source.htm#l00010">grNetwork/Socket/SocketMethods.h:10</a></div></div>
<div class="ttc" id="a00029_htm_a950a98ae75562dc9c6a458acbd330143"><div class="ttname"><a href="a00029.htm#a950a98ae75562dc9c6a458acbd330143">Text::Text</a></div><div class="ttdeci">Text()</div><div class="ttdef"><b>Definition:</b> <a href="a00050_source.htm#l00082">echo.h:82</a></div></div>
<div class="ttc" id="a00005_htm_a34d784c7de57ef82ac88e00044804479"><div class="ttname"><a href="a00005.htm#a34d784c7de57ef82ac88e00044804479">grNetwork::ErrorInfo::lib</a></div><div class="ttdeci">unsigned int lib() const </div><div class="ttdef"><b>Definition:</b> <a href="a00043_source.htm#l00072">grNetwork/core.h:72</a></div></div>
<div class="ttc" id="a00023_htm_a9a8ff6eba0efdf5d355b649f81e23faa"><div class="ttname"><a href="a00023.htm#a9a8ff6eba0efdf5d355b649f81e23faa">grNetwork::Socket::setPort</a></div><div class="ttdeci">void setPort(short int port)</div><div class="ttdef"><b>Definition:</b> <a href="a00043_source.htm#l00088">grNetwork/core.h:88</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Документация по 2GrayEngine. Последние изменения: Пн 19 Май 2014 03:06:19. Создано системой &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
