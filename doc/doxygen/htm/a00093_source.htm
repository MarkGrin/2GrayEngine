<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>2GrayEngine: Исходный файл TextMethods.h</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen_.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo.bmp"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">2GrayEngine
   </div>
   <div id="projectbrief">Network engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Создано системой Doxygen 1.8.5 -->
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_32937a55a6fb687a16826cf9f361e0b9.htm">2GrayEngine-master</a></li><li class="navelem"><a class="el" href="dir_abb26aa1f738470fd3c1e4a1410fa318.htm">code</a></li><li class="navelem"><a class="el" href="dir_4415345cc848248c7d1854a28e161023.htm">userLib</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">TextMethods.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor"># ifndef H_USERLIB_TEXTMETHODS</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor"># define H_USERLIB_TEXTMETHODS</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="keywordtype">void</span> <a class="code" href="a00029.htm#a388f572c62279f839ee138a9afbdeeb5">Text :: print</a> ()</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;{</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    <span class="keywordflow">if</span> ( !text_ )</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;        printf (<span class="stringliteral">&quot;\nBLANK_ECHO!&quot;</span>);</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;        printf (<span class="stringliteral">&quot;\nECHO:%s&quot;</span>, text_);</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;}</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="a00029.htm#a65202a7c3049d325d0e8c88f0e849d32">Text :: readFromQuotes</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* text)</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordtype">char</span>* end = strchr (text + 1, <span class="charliteral">&#39;&quot;&#39;</span>);</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">if</span> ( !end )</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size = end - text - 1;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordtype">char</span>* newText = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    {</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        newText = <span class="keyword">new</span> <span class="keywordtype">char</span>[size + 1];</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        memcpy (newText, text + 1, size);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        newText[size] = 0;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    }</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">catch</span> (::std::bad_alloc)</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    {</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    }</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">if</span> ( this-&gt;text_ )</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keyword">delete</span>[] this-&gt;text_;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    this-&gt;text_ = newText;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="a00029.htm#adecc4441e05c4a2ceec5137a1443a4c1">Text :: set</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* smth)</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size = strlen (smth);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordtype">char</span>* newText = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        newText = <span class="keyword">new</span> <span class="keywordtype">char</span>[size + 1];</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        memcpy (newText, smth, size);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        newText[size] = 0;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">catch</span> (::std::bad_alloc)</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">if</span> ( this-&gt;text_ )</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keyword">delete</span>[] this-&gt;text_;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    this-&gt;text_ = newText;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    printf (<span class="stringliteral">&quot;AAA&quot;</span>);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    printf (<span class="stringliteral">&quot;\nNEW:%s&quot;</span>, text_);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;}</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="a00029.htm#a5601aaadfb98dc18126719b38d532638">Text :: get</a> ()</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;{</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    OUTPUT_DEBUG (<span class="stringliteral">&quot;Getting:%s&quot;</span>, text_);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">return</span> text_;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;}</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<a class="code" href="a00029.htm#a8bbff8b26bfd195b340d303ffa9b121b">Text :: ~Text</a> ()</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">if</span> ( this-&gt;text_ )</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keyword">delete</span>[] this-&gt;text_;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    this-&gt;text_ = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<a class="code" href="a00029.htm#a950a98ae75562dc9c6a458acbd330143">Text :: Text</a> ()</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    :</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <a class="code" href="a00016.htm">Object</a> (12),</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    text_ (nullptr)</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;{</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<a class="code" href="a00015.htm">logic::Object</a>* TEXTcreate ()</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="a00029.htm">Text</a>* result = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        result = <span class="keyword">new</span> <a class="code" href="a00029.htm">Text</a> ();</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordtype">char</span> name[256] = {};</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        sprintf (name,<span class="stringliteral">&quot;\&quot;%p\&quot;&quot;</span>, result);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        result-&gt;<a class="code" href="a00029.htm#a65202a7c3049d325d0e8c88f0e849d32">readFromQuotes</a> (name);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">catch</span> (::std::bad_alloc)</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    {</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">return</span> (<a class="code" href="a00015.htm">logic::Object</a>*) result;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;}</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<a class="code" href="a00015.htm">logic::Object</a>* TEXTcreateOn (<span class="keyword">const</span> <span class="keywordtype">char</span>* text)</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;{</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <a class="code" href="a00029.htm">Text</a>* result = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        result = <span class="keyword">new</span> <a class="code" href="a00029.htm">Text</a> ();</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        result-&gt;<a class="code" href="a00029.htm#a65202a7c3049d325d0e8c88f0e849d32">readFromQuotes</a> (text);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">catch</span> (::std::bad_alloc)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    {</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    }</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordflow">return</span> (<a class="code" href="a00015.htm">logic::Object</a>*) result;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;}</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="preprocessor"># endif </span><span class="comment">/* H_USERLIB_TEXTMETHODS */</span><span class="preprocessor"></span></div>
<div class="ttc" id="a00016_htm"><div class="ttname"><a href="a00016.htm">Object</a></div><div class="ttdef"><b>Definition:</b> <a href="a00071_source.htm#l00012">Object.h:12</a></div></div>
<div class="ttc" id="a00029_htm"><div class="ttname"><a href="a00029.htm">Text</a></div><div class="ttdef"><b>Definition:</b> <a href="a00050_source.htm#l00006">echo.h:6</a></div></div>
<div class="ttc" id="a00029_htm_a388f572c62279f839ee138a9afbdeeb5"><div class="ttname"><a href="a00029.htm#a388f572c62279f839ee138a9afbdeeb5">Text::print</a></div><div class="ttdeci">void print()</div><div class="ttdef"><b>Definition:</b> <a href="a00050_source.htm#l00013">echo.h:13</a></div></div>
<div class="ttc" id="a00029_htm_adecc4441e05c4a2ceec5137a1443a4c1"><div class="ttname"><a href="a00029.htm#adecc4441e05c4a2ceec5137a1443a4c1">Text::set</a></div><div class="ttdeci">bool set(const char *smth)</div><div class="ttdef"><b>Definition:</b> <a href="a00050_source.htm#l00048">echo.h:48</a></div></div>
<div class="ttc" id="a00015_htm"><div class="ttname"><a href="a00015.htm">logic::Object</a></div><div class="ttdef"><b>Definition:</b> <a href="a00047_source.htm#l00013">logic/core.h:13</a></div></div>
<div class="ttc" id="a00029_htm_a65202a7c3049d325d0e8c88f0e849d32"><div class="ttname"><a href="a00029.htm#a65202a7c3049d325d0e8c88f0e849d32">Text::readFromQuotes</a></div><div class="ttdeci">bool readFromQuotes(const char *text)</div><div class="ttdef"><b>Definition:</b> <a href="a00050_source.htm#l00024">echo.h:24</a></div></div>
<div class="ttc" id="a00029_htm_a8bbff8b26bfd195b340d303ffa9b121b"><div class="ttname"><a href="a00029.htm#a8bbff8b26bfd195b340d303ffa9b121b">Text::~Text</a></div><div class="ttdeci">~Text()</div><div class="ttdef"><b>Definition:</b> <a href="a00050_source.htm#l00075">echo.h:75</a></div></div>
<div class="ttc" id="a00029_htm_a950a98ae75562dc9c6a458acbd330143"><div class="ttname"><a href="a00029.htm#a950a98ae75562dc9c6a458acbd330143">Text::Text</a></div><div class="ttdeci">Text()</div><div class="ttdef"><b>Definition:</b> <a href="a00050_source.htm#l00082">echo.h:82</a></div></div>
<div class="ttc" id="a00029_htm_a5601aaadfb98dc18126719b38d532638"><div class="ttname"><a href="a00029.htm#a5601aaadfb98dc18126719b38d532638">Text::get</a></div><div class="ttdeci">const char * get()</div><div class="ttdef"><b>Definition:</b> <a href="a00050_source.htm#l00070">echo.h:70</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Документация по 2GrayEngine. Последние изменения: Пн 19 Май 2014 03:06:19. Создано системой &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
