<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>2GrayEngine: Исходный файл TypeListMethods.h</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen_.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo.bmp"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">2GrayEngine
   </div>
   <div id="projectbrief">Network engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Создано системой Doxygen 1.8.5 -->
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_32937a55a6fb687a16826cf9f361e0b9.htm">2GrayEngine-master</a></li><li class="navelem"><a class="el" href="dir_abb26aa1f738470fd3c1e4a1410fa318.htm">code</a></li><li class="navelem"><a class="el" href="dir_f43a24636d7873fc097a3756357a119f.htm">engine</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">TypeListMethods.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor"># ifndef H_ENGINE_TYPELISTMETHODS</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor"># define H_ENGINE_TYPELISTMETHODS</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div>
<div class="line"><a name="l00015"></a><span class="lineno"><a class="line" href="a00033.htm#a5d5ed44f2168a9c5ac1a8b8d03b7ed63">   15</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="a00033.htm#a5d5ed44f2168a9c5ac1a8b8d03b7ed63">TypeList :: verify</a> ()<span class="keyword"> const</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    <span class="keywordflow">if</span> ( !<span class="keyword">this</span> )</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;}</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div>
<div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="a00033.htm#a56767339d8d805b5f26d8fae82b8f757">   32</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="a00033.htm#a56767339d8d805b5f26d8fae82b8f757">TypeList :: add</a> (<a class="code" href="a00031.htm">logic::TypeAttributes</a>* type, <span class="keywordtype">int</span> type_code)</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">if</span> ( !<a class="code" href="a00033.htm#a5d5ed44f2168a9c5ac1a8b8d03b7ed63">verify</a> () )</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    {</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        list_[type_code] = <span class="keyword">new</span> <a class="code" href="a00031.htm">logic::TypeAttributes</a> (*type);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    }</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">catch</span> ( ::std::out_of_range)</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="comment">//OUTPUT_DEBUG (PLACE, &quot;Cant place code:%d&quot;, type_code);</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    }</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">catch</span> ( ::std::bad_alloc )</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    {</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    }</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div>
<div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="a00033.htm#ae6b53fc675a76bcc60b7883ac447924c">   64</a></span>&#160;<a class="code" href="a00015.htm">logic::Object</a>* <a class="code" href="a00033.htm#ae6b53fc675a76bcc60b7883ac447924c">TypeList :: create</a> (<span class="keywordtype">int</span> type_code)</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">if</span> ( !<a class="code" href="a00033.htm#a5d5ed44f2168a9c5ac1a8b8d03b7ed63">verify</a> () )</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="a00015.htm">logic::Object</a>* result = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">if</span> ( !list_.count (type_code) )</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="comment">//OUTPUT_DEBUG (PLACE, &quot;ERROR: NO code:%d in map&quot;, type_code);</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        }</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <a class="code" href="a00031.htm">logic::TypeAttributes</a>* check = list_[type_code];</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">if</span> ( !check )</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        }</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        result = check-&gt;<a class="code" href="a00031.htm#af3845b1e48937f023a364589bb515920">create</a> ();</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">catch</span> ( ::std::out_of_range)</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="comment">//OUTPUT_DEBUG (PLACE, &quot;ERROR: Cant access code:%d&quot;, type_code);</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    }</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">if</span> ( result )</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="comment">//OUTPUT_DEBUG (PLACE, &quot;Bad creation of type:%d&quot;, type_code);</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;}</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div>
<div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="a00033.htm#a2dc6f7dd75dfebc5a81c711ef30d7fe8">  111</a></span>&#160;<a class="code" href="a00015.htm">logic::Object</a>* <a class="code" href="a00033.htm#ae6b53fc675a76bcc60b7883ac447924c">TypeList :: create</a> (<span class="keywordtype">int</span> type_code, <span class="keyword">const</span> <span class="keywordtype">char</span>* what)</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;{</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">if</span> ( !<a class="code" href="a00033.htm#a5d5ed44f2168a9c5ac1a8b8d03b7ed63">verify</a> () )</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="a00015.htm">logic::Object</a>* result = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    {</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keywordflow">if</span> ( !list_.count (type_code) )</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="comment">//OUTPUT_DEBUG (PLACE, &quot;ERROR: NO code:%d in map&quot;, type_code);</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        }</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keywordflow">if</span> ( !list_[type_code] )</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="comment">//OUTPUT_DEBUG (PLACE, &quot;ERROR:NO function to call on code:%d&quot;, type_code);</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        }</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        result = list_[type_code]-&gt;createOn (what);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">catch</span> ( ::std::out_of_range)</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="comment">//OUTPUT_DEBUG (PLACE, &quot;ERROR: Cant access code:%d&quot;, type_code);</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">if</span> ( result )</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    {</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    }</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="comment">//OUTPUT_DEBUG (PLACE, &quot;Bad creation of type:%d&quot;, type_code);</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div>
<div class="line"><a name="l00151"></a><span class="lineno"><a class="line" href="a00033.htm#a90ca964ebcc1b02bbcde225edd49e812">  151</a></span>&#160;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="a00033.htm#a90ca964ebcc1b02bbcde225edd49e812">TypeList :: size</a> ()<span class="keyword"> const</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">if</span> ( !<a class="code" href="a00033.htm#a5d5ed44f2168a9c5ac1a8b8d03b7ed63">verify</a> () )</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">return</span> list_.size ();</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;}</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div>
<div class="line"><a name="l00169"></a><span class="lineno"><a class="line" href="a00033.htm#a28c2f231813be86009e560da87915e3d">  169</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="a00033.htm#a28c2f231813be86009e560da87915e3d">TypeList :: find</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* what)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;{</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">if</span> ( !<a class="code" href="a00033.htm#a5d5ed44f2168a9c5ac1a8b8d03b7ed63">verify</a> () )</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    std::map&lt;int, logic::TypeAttributes*&gt;::iterator it;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordflow">for</span> (it = list_.begin () ; it != list_.end (); it++)</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    {</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordflow">if</span> ( !strcmp (it-&gt;second-&gt;name (), what) )</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="keywordflow">return</span> it-&gt;first;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    }</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;}</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="preprocessor"># endif </span><span class="comment">/* H_ENGINE_TYPELISTMETHODS */</span><span class="preprocessor"></span></div>
<div class="ttc" id="a00033_htm_a5d5ed44f2168a9c5ac1a8b8d03b7ed63"><div class="ttname"><a href="a00033.htm#a5d5ed44f2168a9c5ac1a8b8d03b7ed63">TypeList::verify</a></div><div class="ttdeci">bool verify() const </div><div class="ttdef"><b>Definition:</b> <a href="a00101_source.htm#l00015">TypeListMethods.h:15</a></div></div>
<div class="ttc" id="a00033_htm_a56767339d8d805b5f26d8fae82b8f757"><div class="ttname"><a href="a00033.htm#a56767339d8d805b5f26d8fae82b8f757">TypeList::add</a></div><div class="ttdeci">bool add(logic::TypeAttributes *type, int typeCode)</div><div class="ttdef"><b>Definition:</b> <a href="a00101_source.htm#l00032">TypeListMethods.h:32</a></div></div>
<div class="ttc" id="a00033_htm_a90ca964ebcc1b02bbcde225edd49e812"><div class="ttname"><a href="a00033.htm#a90ca964ebcc1b02bbcde225edd49e812">TypeList::size</a></div><div class="ttdeci">unsigned int size() const </div><div class="ttdef"><b>Definition:</b> <a href="a00101_source.htm#l00151">TypeListMethods.h:151</a></div></div>
<div class="ttc" id="a00031_htm_af3845b1e48937f023a364589bb515920"><div class="ttname"><a href="a00031.htm#af3845b1e48937f023a364589bb515920">logic::TypeAttributes::create</a></div><div class="ttdeci">Object * create() const </div><div class="ttdef"><b>Definition:</b> <a href="a00047_source.htm#l00148">logic/core.h:148</a></div></div>
<div class="ttc" id="a00033_htm_a28c2f231813be86009e560da87915e3d"><div class="ttname"><a href="a00033.htm#a28c2f231813be86009e560da87915e3d">TypeList::find</a></div><div class="ttdeci">int find(const char *what)</div><div class="ttdef"><b>Definition:</b> <a href="a00101_source.htm#l00169">TypeListMethods.h:169</a></div></div>
<div class="ttc" id="a00031_htm"><div class="ttname"><a href="a00031.htm">logic::TypeAttributes</a></div><div class="ttdef"><b>Definition:</b> <a href="a00047_source.htm#l00016">logic/core.h:16</a></div></div>
<div class="ttc" id="a00015_htm"><div class="ttname"><a href="a00015.htm">logic::Object</a></div><div class="ttdef"><b>Definition:</b> <a href="a00047_source.htm#l00013">logic/core.h:13</a></div></div>
<div class="ttc" id="a00033_htm_ae6b53fc675a76bcc60b7883ac447924c"><div class="ttname"><a href="a00033.htm#ae6b53fc675a76bcc60b7883ac447924c">TypeList::create</a></div><div class="ttdeci">logic::Object * create(int typeCode)</div><div class="ttdef"><b>Definition:</b> <a href="a00101_source.htm#l00064">TypeListMethods.h:64</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Документация по 2GrayEngine. Последние изменения: Пн 19 Май 2014 03:06:19. Создано системой &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
