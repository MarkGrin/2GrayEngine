<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>2GrayEngine: Исходный файл execute.h</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen_.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo.bmp"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">2GrayEngine
   </div>
   <div id="projectbrief">Network engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Создано системой Doxygen 1.8.5 -->
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_32937a55a6fb687a16826cf9f361e0b9.htm">2GrayEngine-master</a></li><li class="navelem"><a class="el" href="dir_abb26aa1f738470fd3c1e4a1410fa318.htm">code</a></li><li class="navelem"><a class="el" href="dir_f43a24636d7873fc097a3756357a119f.htm">engine</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">execute.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor"># ifndef H_ENGINE_EXECUTE</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor"># define H_ENGINE_EXECUTE</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="keywordtype">bool</span> execute  (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size,</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;               ::std::vector&lt;logic::Function*&gt;* functions,</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;               ::std::vector&lt;logic::Object*&gt;* pool,</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;               ::std::vector&lt;::std::pair&lt;char*,unsigned int&gt;&gt;* placeInPool,</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;               <a class="code" href="a00008.htm">ExecMem</a>* mem_);</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keywordtype">int</span>  callCMD  (<a class="code" href="a00008.htm">ExecMem</a>* mem, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i,</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;              ::std::vector&lt;logic::Function*&gt;* functions,</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;              ::std::vector&lt;logic::Object*&gt;* pool,</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;              ::std::vector&lt;::std::pair&lt;char*,unsigned int&gt;&gt;* placeInPool);</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keywordtype">int</span>  delCMD   (<a class="code" href="a00008.htm">ExecMem</a>* mem, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i,</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;              ::std::vector&lt;logic::Function*&gt;* functions,</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;              ::std::vector&lt;logic::Object*&gt;* pool,</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;              ::std::vector&lt;::std::pair&lt;char*,unsigned int&gt;&gt;* placeInPool);</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keywordtype">bool</span> execute (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size,</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;              ::std::vector&lt;logic::Function*&gt;* functions,</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;              ::std::vector&lt;logic::Object*&gt;* pool,</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;              ::std::vector&lt;::std::pair&lt;char*,unsigned int&gt;&gt;* placeInPool,</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;              <a class="code" href="a00008.htm">ExecMem</a>* mem</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;              )</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">if</span> ( !mem || !size || !functions || !pool || !placeInPool )</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    {</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        OUTPUT_INTERNAL (<span class="stringliteral">&quot;bad arguments&quot;</span>);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    }</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    mem-&gt;dump (<span class="stringliteral">&quot;dump.txt&quot;</span>);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; size; i++)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    {</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordtype">int</span> rslt = 0;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">if</span> ( mem-&gt;<a class="code" href="a00008.htm#ac865291d45758ef3c3da2475be178316">get</a>(i) == CMD::CALL )</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            i++;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            rslt = callCMD (mem, i, functions, pool, placeInPool);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="keywordflow">if</span> ( rslt &lt; 0 )</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                OUTPUT_INTERNAL (<span class="stringliteral">&quot;error when executing:%d&quot;</span>, i);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            }</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            i = rslt;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        }</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( mem-&gt;<a class="code" href="a00008.htm#ac865291d45758ef3c3da2475be178316">get</a>(i) == CMD::DEL )</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            i++;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            rslt = delCMD (mem, i, functions, pool, placeInPool);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="keywordflow">if</span> ( rslt &lt; 0 )</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                OUTPUT_INTERNAL (<span class="stringliteral">&quot;error when executing:%d&quot;</span>, i);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            }</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            i = rslt;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        }</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keywordtype">int</span> callCMD  (<a class="code" href="a00008.htm">ExecMem</a>* mem, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i,</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;              ::std::vector&lt;logic::Function*&gt;* functions,</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;              ::std::vector&lt;logic::Object*&gt;* pool,</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;              ::std::vector&lt;::std::pair&lt;char*,unsigned int&gt;&gt;* placeInPool)</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;{</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">if</span> ( !mem || !functions || !pool || !placeInPool )</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        OUTPUT_INTERNAL (<span class="stringliteral">&quot;bad args&quot;</span>);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                            <span class="comment">//TODO::Delete what was marked to be deleted</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordtype">int</span> funcNum = mem-&gt;<a class="code" href="a00008.htm#ac865291d45758ef3c3da2475be178316">get</a>(i);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">if</span> ( funcNum &gt;= functions-&gt;size () )</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        OUTPUT_INTERNAL (<span class="stringliteral">&quot;calling unknown function:%d&quot;</span>, funcNum);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    }</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <a class="code" href="a00009.htm">logic::Function</a>* call = functions-&gt;at(funcNum);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        call = functions-&gt;at(mem-&gt;<a class="code" href="a00008.htm#ac865291d45758ef3c3da2475be178316">get</a>(i));</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">catch</span> (::std::out_of_range)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        OUTPUT_INTERNAL (<span class="stringliteral">&quot;unknown index:%d&quot;</span>, mem-&gt;<a class="code" href="a00008.htm#ac865291d45758ef3c3da2475be178316">get</a>(i));</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">if</span> ( !call )</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        OUTPUT_INTERNAL (<span class="stringliteral">&quot;unusable function&quot;</span>);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    }</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    i++;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordtype">int</span> argnum = mem-&gt;<a class="code" href="a00008.htm#ac865291d45758ef3c3da2475be178316">get</a>(i);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; argnum; j++)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        i++;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <a class="code" href="a00015.htm">logic::Object</a>* arg = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">if</span> ( mem-&gt;<a class="code" href="a00008.htm#ac865291d45758ef3c3da2475be178316">get</a>(i) &amp; ARG_FLAG::ALLOCED )</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            i++;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="keywordflow">if</span> ( !mem-&gt;<a class="code" href="a00008.htm#af6d5d6c1d716f57b8eb656af16a65332">memcpy</a> (i, (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)(&amp;arg), sizeof (arg)) )</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                OUTPUT_INTERNAL (<span class="stringliteral">&quot;Cant copy&quot;</span>);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            }</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            i += <span class="keyword">sizeof</span> (<a class="code" href="a00015.htm">logic::Object</a>*) - 1;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keywordflow">if</span> ( !(call-&gt;<a class="code" href="a00009.htm#a7fbd0890ee0991f4a2cab7cd043d0332">pushArg</a> (arg)) )</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                OUTPUT_INTERNAL (<span class="stringliteral">&quot;bad arg:%d&quot;</span>, arg);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        OUTPUT_DEBUG (<span class="stringliteral">&quot;TEXT_CALL_ARG:%p&quot;</span>, arg);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        }</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            i++;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> argIndex = mem-&gt;<a class="code" href="a00008.htm#ac865291d45758ef3c3da2475be178316">get</a>(i);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <span class="keywordflow">if</span> ( argIndex &gt;= pool-&gt;size () )</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            {</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                OUTPUT_INTERNAL (<span class="stringliteral">&quot;bad arg index:%d&quot;</span>, argIndex);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            }</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            arg = pool-&gt;at (argIndex);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            OUTPUT_DEBUG (<span class="stringliteral">&quot;ARG_CALL Indx:%d Ptr:%p&quot;</span>, argIndex, arg);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="keywordflow">if</span> ( !(call-&gt;<a class="code" href="a00009.htm#a7fbd0890ee0991f4a2cab7cd043d0332">pushArg</a> (arg)) )</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            {</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                OUTPUT_INTERNAL (<span class="stringliteral">&quot;bad arg:%d&quot;</span>, arg);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            }</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        }</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    }</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    OUTPUT_DEBUG (<span class="stringliteral">&quot;Calling:%p&quot;</span>, call);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    call-&gt;<a class="code" href="a00009.htm#ae006844a02161d12182ab372ca5c257b">execute</a> ();</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    OUTPUT_DEBUG (<span class="stringliteral">&quot;Call successful&quot;</span>);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;}</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="keywordtype">int</span>  delCMD   (<a class="code" href="a00008.htm">ExecMem</a>* mem, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i,</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;              ::std::vector&lt;logic::Function*&gt;* functions,</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;              ::std::vector&lt;logic::Object*&gt;* pool,</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;              ::std::vector&lt;::std::pair&lt;char*,unsigned int&gt;&gt;* placeInPool)</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;{</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordflow">if</span> ( !mem || !functions || !pool || !placeInPool )</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    {</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        OUTPUT_INTERNAL (<span class="stringliteral">&quot;bad args&quot;</span>);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    }</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="comment">//Call destructor TODO::Add destructors</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    {</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keywordflow">if</span> ( pool-&gt;at (mem-&gt;<a class="code" href="a00008.htm#ac865291d45758ef3c3da2475be178316">get</a>(i)) )</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <span class="keyword">delete</span> pool-&gt;at (mem-&gt;<a class="code" href="a00008.htm#ac865291d45758ef3c3da2475be178316">get</a>(i));</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        pool-&gt;at (mem-&gt;<a class="code" href="a00008.htm#ac865291d45758ef3c3da2475be178316">get</a>(i)) = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordflow">catch</span> (::std::out_of_range sct)</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    {</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        OUTPUT_INTERNAL (<span class="stringliteral">&quot;bad delete index:%d&quot;</span>, mem-&gt;<a class="code" href="a00008.htm#ac865291d45758ef3c3da2475be178316">get</a>(i));</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    }</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;}</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="keywordtype">void</span> dump        (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* data, <span class="keywordtype">int</span> amount)</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;{</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    FILE* file = fopen (<span class="stringliteral">&quot;Dump.txt&quot;</span>, <span class="stringliteral">&quot;w&quot;</span>);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordflow">if</span> ( !file )</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; amount; i++)</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <span class="keywordtype">int</span> input = data[i];</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        fprintf (file, <span class="stringliteral">&quot;[%3d]:{%X}\n&quot;</span>, i, input);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    }</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    fclose (file);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;}</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="preprocessor"># endif </span><span class="comment">/* H_ENGINE_EXECUTE */</span><span class="preprocessor"></span></div>
<div class="ttc" id="a00008_htm"><div class="ttname"><a href="a00008.htm">ExecMem</a></div><div class="ttdef"><b>Definition:</b> <a href="a00055_source.htm#l00013">execMem.h:13</a></div></div>
<div class="ttc" id="a00009_htm_ae006844a02161d12182ab372ca5c257b"><div class="ttname"><a href="a00009.htm#ae006844a02161d12182ab372ca5c257b">logic::Function::execute</a></div><div class="ttdeci">bool execute()</div><div class="ttdef"><b>Definition:</b> <a href="a00047_source.htm#l00117">logic/core.h:117</a></div></div>
<div class="ttc" id="a00009_htm_a7fbd0890ee0991f4a2cab7cd043d0332"><div class="ttname"><a href="a00009.htm#a7fbd0890ee0991f4a2cab7cd043d0332">logic::Function::pushArg</a></div><div class="ttdeci">bool pushArg(Object *)</div><div class="ttdef"><b>Definition:</b> <a href="a00047_source.htm#l00043">logic/core.h:43</a></div></div>
<div class="ttc" id="a00008_htm_ac865291d45758ef3c3da2475be178316"><div class="ttname"><a href="a00008.htm#ac865291d45758ef3c3da2475be178316">ExecMem::get</a></div><div class="ttdeci">unsigned char get(unsigned int index) const </div><div class="ttdef"><b>Definition:</b> <a href="a00056_source.htm#l00144">execMemMethods.h:144</a></div></div>
<div class="ttc" id="a00015_htm"><div class="ttname"><a href="a00015.htm">logic::Object</a></div><div class="ttdef"><b>Definition:</b> <a href="a00047_source.htm#l00013">logic/core.h:13</a></div></div>
<div class="ttc" id="a00009_htm"><div class="ttname"><a href="a00009.htm">logic::Function</a></div><div class="ttdef"><b>Definition:</b> <a href="a00047_source.htm#l00018">logic/core.h:18</a></div></div>
<div class="ttc" id="a00008_htm_af6d5d6c1d716f57b8eb656af16a65332"><div class="ttname"><a href="a00008.htm#af6d5d6c1d716f57b8eb656af16a65332">ExecMem::memcpy</a></div><div class="ttdeci">bool memcpy(unsigned int indexFrom, unsigned char *to, unsigned int size) const </div><div class="ttdef"><b>Definition:</b> <a href="a00056_source.htm#l00097">execMemMethods.h:97</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Документация по 2GrayEngine. Последние изменения: Пн 19 Май 2014 03:06:19. Создано системой &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
